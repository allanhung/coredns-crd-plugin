package gateway

/*
Copyright 2022 The k8gb Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Generated by GoLic, for more details see: https://github.com/AbsaOSS/golic
*/

import (
	"os"
)

type Opts struct {
	annotation   string
	apex         string
	hostmaster   string
	ttlLow       uint32
	ttlHigh      uint32
	zones        []string
	servicens    string
	servicelabel map[string]string
}

var (
	ttlLowDefault     = uint32(60)
	ttlHighDefault    = uint32(3600)
	defaultApex       = "dns"
	defaultHostmaster = "hostmaster"
)

func NewGatewayOpts(annotation, apex string, ttlLow, ttlHigh uint32, zones []string, servicens string, servicelabel map[string]string) Opts {
	opts := Opts{
		apex:       defaultApex,
		ttlLow:     ttlLowDefault,
		ttlHigh:    ttlHighDefault,
		hostmaster: defaultHostmaster,
	}
	if len(apex) != 0 {
		opts.apex = apex
	}
	if ttlLow != 0 {
		opts.ttlLow = ttlLow
	}
	if ttlHigh != 0 {
		opts.ttlHigh = ttlHigh
	}
	opts.annotation = annotation
	opts.zones = zones
	if len(servicens) != 0 {
		opts.servicens = servicens
	} else {
		opts.servicens = os.Getenv("POD_NAMESPACE")
	}
	opts.servicelabel = servicelabel
	return opts
}
